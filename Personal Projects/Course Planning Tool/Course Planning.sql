USE smu_courses;

SELECT * FROM COURSES;

# UPDATE COMPLETED COURSES INTO A TABLE FOR FURTHER QUERIES
DROP TABLE IF EXISTS COMPLETED;
CREATE TABLE COMPLETED (COURSECODE VARCHAR(15));
INSERT INTO COMPLETED (COURSECODE) VALUES ('NIL'),
	('COR1306'),('COR2226'),('IS111'),('IS114'),					# Y1T1
    ('COR2100'),('IS112'),('IS113'),('COR3001'),('COR1100'),		# Y1T2
    ('IS210'),('IS211'),('IS216'),('COR-IS1702'),('COR-STAT1202'),	# Y2T1
    ('IS213'),('IS214'),('IS215'),('IS217'),('IS464');				# Y2T2
    
# OVERVIEW OF IS COURSES AND TRACK
SELECT C.COURSEID, COURSENAME, PRE_REQ, TRACK, T1, T2 FROM COURSES AS C
LEFT JOIN PRE_REQUISITIES AS P ON C.COURSEID = P.COURSEID
LEFT JOIN AVAILABILITY AS A ON C.COURSEID = A.COURSEID
LEFT JOIN IS_TRACKS AS I ON C.COURSEID = I.COURSEID
WHERE C.COURSEID LIKE "IS%"
AND TRACK IS NOT NULL
ORDER BY TRACK, C.COURSEID;

# OVERALL IS COURSES WITH PRE_REQ
SELECT P.COURSEID, C1.COURSENAME, P.PRE_REQ, C2.COURSENAME, A.T1, A.T2 FROM PRE_REQUISITIES AS P
LEFT JOIN COURSES AS C1 ON P.COURSEID = C1.COURSEID
LEFT JOIN AVAILABILITY AS A ON P.COURSEID = A.COURSEID
LEFT JOIN COURSES AS C2 ON P.PRE_REQ = C2.COURSEID
WHERE P.COURSEID LIKE "IS%"
AND P.PRE_REQ NOT IN ('NIL', '')
ORDER BY COURSEID ASC;

# COURSES WHERE PRE-REQ ALREADY FULFILLED
SELECT P.COURSEID, COURSENAME, PRE_REQ, T1, T2, TRACK FROM PRE_REQUISITIES AS P -- ,COUNT(TRACK)	 -- ADD IN IF USING GROUP FUNCTION
LEFT JOIN COURSES AS C ON P.COURSEID = C.COURSEID
LEFT JOIN AVAILABILITY AS A ON P.COURSEID = A.COURSEID
LEFT JOIN IS_TRACKS AS I ON P.COURSEID = I.COURSEID
WHERE P.COURSEID LIKE "IS%" 
-- AND P.COURSEID NOT LIKE "IS1%"	-- TO FILTER OUT IS1XX COURSES
-- AND TRACK IS NOT NULL			-- TO FILTER NULL VALUES
AND P.COURSEID NOT IN (SELECT * FROM COMPLETED)			-- TO FILTER OUT COMPLETED COURSES
AND T1 = 'Y' AND T2 != 'Y'		-- TO FILTER FOR T1
-- AND T2 = 'Y' AND T1 != 'Y'		-- TO FILTER FOR T2
AND PRE_REQ IN (SELECT * FROM COMPLETED)
-- GROUP BY P.COURSEID, COURSENAME, PRE_REQ, T1, T2	-- REMOVE TO SEE HOW MANY TRACKS EACH COURSE CAN FULFILL
ORDER BY COURSEID, TRACK ASC;

# COURSES WHERE PRE-REQ NOT FULFILLED
SELECT P.COURSEID, C1.COURSENAME, P.PRE_REQ, A.T1, A.T2 FROM PRE_REQUISITIES AS P
LEFT JOIN COURSES AS C1 ON P.COURSEID = C1.COURSEID
LEFT JOIN AVAILABILITY AS A ON P.COURSEID = A.COURSEID
WHERE P.COURSEID LIKE "IS%"
AND PRE_REQ NOT IN (SELECT * FROM COMPLETED)
-- AND T1 = 'Y' AND T2 != 'Y'		-- TO FILTER FOR T1
-- AND T2 = 'Y' AND T1 != 'Y'		-- TO FILTER FOR T2
ORDER BY COURSEID ASC;

# WHICH COURSE NOT COMPLETED THAT HAS MOST PRE_REQS
SELECT P.COURSEID, COURSENAME, COUNT(PRE_REQ) FROM PRE_REQUISITIES AS P
LEFT JOIN COURSES AS C ON P.COURSEID = C.COURSEID
LEFT JOIN AVAILABILITY AS A ON P.COURSEID = A.COURSEID
WHERE P.COURSEID LIKE "IS%"
AND PRE_REQ NOT IN (SELECT * FROM COMPLETED)
-- AND T1 = 'Y' AND T2 != 'Y'		-- TO FILTER FOR T1
-- AND T2 = 'Y' AND T1 != 'Y'		-- TO FILTER FOR T2
GROUP BY PRE_REQ
ORDER BY P.COURSEID ASC;

# PRE-REQ COURSES FOR SECOND MAJOR
SELECT S.COURSEID, COURSENAME, I.TRACK, MAJOR, MANDATORY, PRE_REQ, MUTUAL_EXC FROM SECOND_MAJOR AS S
LEFT JOIN PRE_REQUISITIES AS P ON S.COURSEID = P.COURSEID
LEFT JOIN COURSES AS C ON P.COURSEID = C.COURSEID
LEFT JOIN IS_TRACKS AS I ON P.COURSEID = I.COURSEID
WHERE MAJOR LIKE '%DIGITAL%'				-- INPUT SECOND MAJOR HERE
AND MUTUAL_EXC NOT IN (SELECT * FROM COMPLETED)
ORDER BY MANDATORY;

-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# SPECIFIC COURSE DETAILS
select c.courseid, coursename, track, pre_req, mutual_exc, t1, t2 from courses as c
left join availability as a on c.courseid = a.courseid
left join pre_requisities as p on c.courseid = p.courseid
left join is_tracks as t on c.courseid = t.courseid
where c.courseid = 'IS215';				-- INPUT COURSEID HERE

# CHECK WHICH COURSES REQUIRE SPECIFIC COURSE AS PRE-REQ
SELECT C.COURSEID, C.COURSENAME, P.PRE_REQ, P.MUTUAL_EXC, A.T1, A.T2, T.TRACK FROM COURSES AS C
LEFT JOIN AVAILABILITY AS A ON C.COURSEID = A.COURSEID
LEFT JOIN PRE_REQUISITIES AS P ON C.COURSEID = P.COURSEID
LEFT JOIN IS_TRACKS AS T ON C.COURSEID = T.COURSEID
WHERE P.PRE_REQ LIKE '%IS212%';			-- INPUT COURSEID HERE

# SPECIFIC TRACK DETAILS
SELECT C.COURSEID, C.COURSENAME, P.PRE_REQ, P.MUTUAL_EXC, T.TRACK, A.T1, A.T2 FROM COURSES AS C
LEFT JOIN IS_TRACKS AS T ON C.COURSEID = T.COURSEID
LEFT JOIN AVAILABILITY AS A ON C.COURSEID = A.COURSEID
LEFT JOIN PRE_REQUISITIES AS P ON C.COURSEID = P.COURSEID
WHERE T.TRACK LIKE "%DIGITAL%"			-- INPUT TRACK HERE
-- AND C.COURSEID NOT LIKE 'CS%'			-- FILTER OUT CS COURSES
ORDER BY C.COURSEID;

-- # MULTIPLE TRACK COURSES
-- # IS446 / IS217 / IS453